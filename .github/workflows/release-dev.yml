name: Release Dev

on:
  push:
    tags:
      - "v*-dev*"

permissions:
  contents: read

env:
  GOPRIVATE: github.com/Layr-Labs/*
  FOUNDRY_PROFILE: ci

jobs:
  lint:
    uses: ./.github/workflows/golangci-lint.yml
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

  test:
    uses: ./.github/workflows/tests.yml
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
  
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [lint, test]
    permissions:
      contents: write
      actions: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set version from tag
        run: |
          VERSION="${{ github.ref_name }}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Building dev version: $VERSION"
          
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/eigenx-cli-protocol-preprod
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Configure git for private repos
        run: |
          git config --global url."https://${{ secrets.GH_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: Build binary
        env:
          TELEMETRY_TOKEN: ${{ secrets.TELEMETRY_TOKEN }}
        run: |
          go mod tidy
          echo "Building binary for dev version $VERSION"
          make release
          sudo chown -R $USER:$USER .
          ./scripts/bundleReleases.sh $VERSION

      - name: Upload to dev S3
        run: |
          echo "Uploading to dev bucket..."

          get_content_type() {
            case "$1" in
              *.tar.gz) echo "application/gzip" ;;
              *.zip) echo "application/zip" ;;
              *) echo "" ;;
            esac
          }

          # Upload all release artifacts
          for asset_name in $(ls ./release | grep -E '\.(tar\.gz|zip)$');
          do
            asset="./release/${asset_name}"
            echo "Uploading ${asset_name} to dev S3..."
            content_type=$(get_content_type "$asset_name")
            if [ -n "$content_type" ]; then
              aws s3 cp "$asset" "s3://eigenlayer-eigenx-releases-dev/$VERSION/" --content-type "$content_type"
            else
              aws s3 cp "$asset" "s3://eigenlayer-eigenx-releases-dev/$VERSION/"
            fi
          done

          # Update VERSION file to point to this dev release
          echo "Updating dev VERSION file to $VERSION"
          echo "$VERSION" > VERSION_DEV
          aws s3 cp VERSION_DEV "s3://eigenlayer-eigenx-releases-dev/VERSION" --content-type "text/plain"

      - name: Summary
        run: |
          echo "âœ… Dev release $VERSION deployed successfully!"
          echo "ðŸ“¦ Artifacts uploaded to: s3://eigenlayer-eigenx-releases-dev/$VERSION/"
          echo "ðŸ”— Install with: curl -sSL install-script | bash -s -- --dev"
